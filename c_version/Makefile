# ============================================================
# ======================== EMULATION =========================
CPUS = 2
QEMU = qemu-system-i386
QEMUOPTS = \
	-drive file=build/xv6.img,index=0,media=disk,format=raw \
	-smp $(CPUS) \
	-m 512
QEMUGDB = -gdb tcp::251000	# port must match that in .gdbinit

qemu-gdb: build/xv6.img
	@echo "*** Now run gdb in another tab ***" 1>&2
	$(QEMU) -nographic $(QEMUOPTS) -S $(QEMUGDB)


# ============================================================
# ========================== BUILD ===========================

# Always make a clean build
$(shell rm -rf build && mkdir build)

CC = clang-9
CFLAGS = \
	-fno-pic \
	-fno-pie \
	-static \
	-fno-builtin \
	-fno-strict-aliasing \
	-fno-omit-frame-pointer  \
	-fno-stack-protector  \
	-nostdinc \
	-Oz -Wall -ggdb -Werror -Iinclude -m32
# -fno-pic 		= disable position-independent code
# -no-pie 		= disable position-independent executable
# -static		= link statically
# -fno-builtin	= don't recognise builtin functions
# -fno-omit-frame-pointer = don't optimise away rbp usage
# -fno-stack-protector = don't include code protecting from buffer overflow
# -nostdinc		= ignore standard include paths
# -Oz			= optimise aggressively for size

LDFLAGS = -m elf_i386
# (for the boot block we're also using -N):
# -N 			= 1) sets the text and data sections to be readable and writable
#				  2) disables page-aligning of the data segment
#				  3) disables linking against shared libraries

build/bootblock: boot/loader.asm boot/loader_main.c
	nasm -f elf32 -g boot/loader.asm -o build/loader.o
	$(CC) $(CFLAGS) -c boot/loader_main.c -o build/loader_main.o
	ld $(LDFLAGS) -N -e start -Ttext 0x7C00 build/loader.o build/loader_main.o -o build/bootblock.o
	objcopy -S -O binary -j .text build/bootblock.o build/bootblock
	./sign.py build/bootblock

build/kernel.o: kernel/main.c
	$(CC) $(CFLAGS) -c kernel/main.c -o build/kernel.o

build/kernel: kernel/entry.asm kernel/linker-script.ld build/kernel.o
	nasm -f elf32 -g kernel/entry.asm -o build/entry.o
	ld $(LDFLAGS) -T kernel/linker-script.ld build/entry.o build/kernel.o -o build/kernel

build/xv6.img: build/bootblock build/kernel
	dd if=/dev/zero of=build/xv6.img count=10000
	dd if=build/bootblock of=build/xv6.img conv=notrunc
	dd if=build/kernel of=build/xv6.img seek=1 conv=notrunc
